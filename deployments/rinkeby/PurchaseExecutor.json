{
  "address": "0x07A93085b35eea4c5d1569ccF606D74a80c75957",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_usdc_to_sarco_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_vesting_end_delay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offer_expiration_delay",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_sarco_purchasers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_sarco_allocations",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_sarco_allocations_total",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_usdc_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sarco_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_general_token_vesting",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sarco_dao",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "started_at",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires_at",
          "type": "uint256"
        }
      ],
      "name": "OfferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sarco_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sarco_allocation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdc_cost",
          "type": "uint256"
        }
      ],
      "name": "PurchaseExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensRecovered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GENERAL_TOKEN_VESTING",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SARCO_DAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SARCO_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC_TO_SARCO_RATE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sarco_receiver",
          "type": "address"
        }
      ],
      "name": "execute_purchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sarco_receiver",
          "type": "address"
        }
      ],
      "name": "get_allocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offer_expiration_delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offer_expired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offer_expires_at",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offer_started",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "offer_started_at",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recover_unsold_tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sarco_allocations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sarco_allocations_total",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc_to_sarco_rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vesting_end_delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc621001bcb391d435f3e09897b24b43dbfa7a8aa361d842698193a30214055cc",
  "receipt": {
    "to": null,
    "from": "0xB7332A228329896a3B286b8670880A3cA313094d",
    "contractAddress": "0x07A93085b35eea4c5d1569ccF606D74a80c75957",
    "transactionIndex": 10,
    "gasUsed": "1790180",
    "logsBloom": "0x
    "blockHash": "0x6378bedeb4a0b30fecf2521cfde697e95b183b88dcf03e2a00ee3110e266d377",
    "transactionHash": "0xc621001bcb391d435f3e09897b24b43dbfa7a8aa361d842698193a30214055cc",
    "logs": [],
    "blockNumber": 8855797,
    "cumulativeGasUsed": "4537202",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1,
    100,
    1000,
    [
      "0xaf6c936a0a48b8ffbf8c4725cc2d44af126904aa",
      "0xb1a5baace5444e7793035cbe9d58b4597655bfe3",
      "0x6d21266dfcf5541bee9f67c4837aaa72b3bf9303"
    ],
    [
      110,
      120,
      130
    ],
    360,
    "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
    "0x7697b462a7c4ff5f8b55bdbc2f4076c2af9cf51a",
    "0x8727c592F28F10b42eB0914a7f6a5885823794c0",
    "0xAE9B102741a1B60C221e39CD9526Ab38c9865AB3"
  ],
  "solcInputHash": "be852efa0b8a8d4945db4ec46aae85fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdc_to_sarco_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vesting_end_delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offer_expiration_delay\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_sarco_purchasers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sarco_allocations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_sarco_allocations_total\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usdc_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sarco_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_general_token_vesting\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sarco_dao\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"started_at\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires_at\",\"type\":\"uint256\"}],\"name\":\"OfferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sarco_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sarco_allocation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdc_cost\",\"type\":\"uint256\"}],\"name\":\"PurchaseExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GENERAL_TOKEN_VESTING\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SARCO_DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SARCO_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_TO_SARCO_RATE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sarco_receiver\",\"type\":\"address\"}],\"name\":\"execute_purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sarco_receiver\",\"type\":\"address\"}],\"name\":\"get_allocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offer_expiration_delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offer_expired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offer_expires_at\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offer_started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offer_started_at\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recover_unsold_tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sarco_allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sarco_allocations_total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc_to_sarco_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vesting_end_delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"allow a whitelisted set of addresses to purchase SARCO tokens, for stablecoins (USDC), at a set rate\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"inits/sets sarco purchase enviorment\",\"params\":{\"_general_token_vesting\":\"General Vesting contract address\",\"_offer_expiration_delay\":\"Delay from the contract deployment to offer expiration, in seconds\",\"_sarco_allocations\":\"List of SARCO token allocations, should include decimals 10 ** 18\",\"_sarco_allocations_total\":\"Checksum of SARCO token allocations, should include decimals 10 ** 18\",\"_sarco_dao\":\"Sarco DAO contract address\",\"_sarco_purchasers\":\"List of valid SARCO purchasers\",\"_sarco_token\":\"Sarco token address\",\"_usdc_to_sarco_rate\":\"How much SARCO one gets for one USDC (multiplied by 10**18)\",\"_usdc_token\":\"USDC token address\",\"_vesting_end_delay\":\"Delay from the purchase moment to the vesting end moment, in seconds\"}},\"execute_purchase(address)\":{\"details\":\"Purchases Sarco for the specified address (defaults to message sender) in exchange for USDC.\"},\"get_allocation(address)\":{\"returns\":{\"_0\":\"A tuple: the first element is the amount of SARCO available for purchase (zero if the purchase was already executed for that address), the second element is the USDC cost of the purchase.\"}},\"recover_unsold_tokens()\":{\"details\":\"If unsold_sarco_amount > 0 after the offer expired, sarco tokens are send back to sacro_dao.\"}},\"title\":\"PurchaseExecutor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PurchaseExecutor.sol\":\"PurchaseExecutor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/PurchaseExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/GeneralTokenVesting.sol\\\";\\n\\n/**\\n * @title PurchaseExecutor\\n * @dev allow a whitelisted set of addresses to purchase SARCO tokens, for stablecoins (USDC), at a set rate\\n */\\ncontract PurchaseExecutor {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant USDC_TO_SARCO_RATE_PRECISION = 10**18;\\n\\n    // Set during deployment/constructor\\n    IERC20 public USDC_TOKEN;\\n    IERC20 public SARCO_TOKEN;\\n    address public GENERAL_TOKEN_VESTING;\\n    address public SARCO_DAO;\\n\\n    // How much SARCO in one USDC, USDC_TO_SARCO_RATE_PERCISION being 1\\n    uint256 public usdc_to_sarco_rate;\\n    uint256 public sarco_allocations_total;\\n    mapping(address => uint256) public sarco_allocations;\\n\\n    // Timing in seconds\\n    uint256 public offer_expiration_delay;\\n    uint256 public offer_started_at;\\n    uint256 public offer_expires_at;\\n    uint256 public vesting_end_delay;\\n\\n    // The purchase has been executed exchanging USDC to vested SARCO\\n    event PurchaseExecuted(\\n        // the address that has received the vested SARCO tokens\\n        address indexed sarco_receiver,\\n        // the number of SARCO tokens vested to sarco_receiver\\n        uint256 sarco_allocation,\\n        // the amount of USDC that was paid and forwarded to the DAO\\n        uint256 usdc_cost\\n    );\\n\\n    // Creates a window of time which the whitelisted set of addresses may purchase SARCO\\n    event OfferStarted(\\n        // Window start time\\n        uint256 started_at,\\n        // Window end time\\n        uint256 expires_at\\n    );\\n\\n    // Recover Tokens\\n    event TokensRecovered(\\n        // Amount of Tokens\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev inits/sets sarco purchase enviorment\\n     * @param _usdc_to_sarco_rate How much SARCO one gets for one USDC (multiplied by 10**18)\\n     * @param _vesting_end_delay Delay from the purchase moment to the vesting end moment, in seconds\\n     * @param _offer_expiration_delay Delay from the contract deployment to offer expiration, in seconds\\n     * @param _sarco_purchasers  List of valid SARCO purchasers\\n     * @param _sarco_allocations List of SARCO token allocations, should include decimals 10 ** 18\\n     * @param _sarco_allocations_total Checksum of SARCO token allocations, should include decimals 10 ** 18\\n     * @param _usdc_token USDC token address\\n     * @param _sarco_token Sarco token address\\n     * @param _general_token_vesting General Vesting contract address\\n     * @param _sarco_dao Sarco DAO contract address\\n     */\\n    constructor(\\n        uint256 _usdc_to_sarco_rate,\\n        uint256 _vesting_end_delay,\\n        uint256 _offer_expiration_delay,\\n        address[] memory _sarco_purchasers,\\n        uint256[] memory _sarco_allocations,\\n        uint256 _sarco_allocations_total,\\n        address _usdc_token,\\n        address _sarco_token,\\n        address _general_token_vesting,\\n        address _sarco_dao\\n    ) {\\n        require(\\n            _usdc_to_sarco_rate > 0,\\n            \\\"PurchaseExecutor: rate must be greater than 0\\\"\\n        );\\n        require(\\n            _vesting_end_delay > 0,\\n            \\\"PurchaseExecutor: end_delay must be greater than 0\\\"\\n        );\\n        require(\\n            _offer_expiration_delay > 0,\\n            \\\"PurchaseExecutor: offer_expiration must be greater than 0\\\"\\n        );\\n        require(\\n            _sarco_purchasers.length == _sarco_allocations.length,\\n            \\\"PurchaseExecutor: purchasers and allocations lengths must be equal\\\"\\n        );\\n        require(\\n            _usdc_token != address(0),\\n            \\\"PurchaseExecutor: _usdc_token cannot be 0 address\\\"\\n        );\\n        require(\\n            _sarco_token != address(0),\\n            \\\"PurchaseExecutor: _sarco_token cannot be 0 address\\\"\\n        );\\n        require(\\n            _general_token_vesting != address(0),\\n            \\\"PurchaseExecutor: _general_token_vesting cannot be 0 address\\\"\\n        );\\n        require(\\n            _sarco_dao != address(0),\\n            \\\"PurchaseExecutor: _sarco_dao cannot be 0 address\\\"\\n        );\\n        // Set global variables\\n        usdc_to_sarco_rate = _usdc_to_sarco_rate;\\n        vesting_end_delay = _vesting_end_delay;\\n        offer_expiration_delay = _offer_expiration_delay;\\n        sarco_allocations_total = _sarco_allocations_total;\\n        USDC_TOKEN = IERC20(_usdc_token);\\n        SARCO_TOKEN = IERC20(_sarco_token);\\n        GENERAL_TOKEN_VESTING = _general_token_vesting;\\n        SARCO_DAO = _sarco_dao;\\n\\n        uint256 allocations_sum = 0;\\n\\n        for (uint256 i = 0; i < _sarco_purchasers.length; i++) {\\n            address purchaser = _sarco_purchasers[i];\\n            require(\\n                purchaser != address(0),\\n                \\\"PurchaseExecutor: Purchaser Cannot be the Zero address\\\"\\n            );\\n            require(\\n                sarco_allocations[purchaser] == 0,\\n                \\\"PurchaseExecutor: Allocation has already been set\\\"\\n            );\\n            uint256 allocation = _sarco_allocations[i];\\n            require(\\n                allocation > 0,\\n                \\\"PurchaseExecutor: No allocated Sarco tokens for address\\\"\\n            );\\n            sarco_allocations[purchaser] = allocation;\\n            allocations_sum += allocation;\\n        }\\n        require(\\n            allocations_sum == _sarco_allocations_total,\\n            \\\"PurchaseExecutor: Allocations_total does not equal the sum of passed allocations\\\"\\n        );\\n    }\\n\\n    //should this be public - msg.sender can only check\\n    function _get_allocation(address _sarco_receiver)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 sarco_allocation = sarco_allocations[_sarco_receiver];\\n        uint256 usdc_cost = (sarco_allocation / usdc_to_sarco_rate) /\\n            10**(18 - 6);\\n        return (sarco_allocation, usdc_cost);\\n    }\\n\\n    function offer_started() public view returns (bool) {\\n        return offer_started_at != 0;\\n    }\\n\\n    function offer_expired() public view returns (bool) {\\n        return block.timestamp >= offer_expires_at;\\n    }\\n\\n    /**\\n     * @notice Starts the offer if it 1) hasn't been started yet and 2) has received funding in full.\\n     */\\n    function _start_unless_started() internal {\\n        require(\\n            offer_started_at == 0,\\n            \\\"PurchaseExecutor: Offer has already started\\\"\\n        );\\n        require(\\n            SARCO_TOKEN.balanceOf(address(this)) == sarco_allocations_total,\\n            \\\"PurchaseExecutor: not funded with Sarco Tokens\\\"\\n        );\\n\\n        offer_started_at = block.timestamp;\\n        offer_expires_at = block.timestamp + offer_expiration_delay;\\n        emit OfferStarted(offer_started_at, offer_expires_at);\\n    }\\n\\n    function start() external {\\n        _start_unless_started();\\n    }\\n\\n    /**\\n     * @return A tuple: the first element is the amount of SARCO available for purchase (zero if\\n        the purchase was already executed for that address), the second element is the\\n        USDC cost of the purchase.\\n     */\\n    function get_allocation(address _sarco_receiver)\\n        external\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return _get_allocation(_sarco_receiver);\\n    }\\n\\n    function _execute_purchase(address _sarco_receiver) internal {\\n        if (offer_started_at == 0) {\\n            _start_unless_started();\\n        }\\n        require(\\n            block.timestamp < offer_expires_at,\\n            \\\"PurchaseExecutor: offer expired\\\"\\n        );\\n\\n        (uint256 sarco_allocation, uint256 usdc_cost) = _get_allocation(\\n            _sarco_receiver\\n        );\\n\\n        // check allocation\\n        require(\\n            sarco_allocation > 0,\\n            \\\"PurchaseExecutor: you have no Sarco allocation\\\"\\n        );\\n\\n        // clear purchaser allocation\\n        sarco_allocations[_sarco_receiver] = 0;\\n\\n        // forward USDC cost of the purchase to the DAO contract\\n        USDC_TOKEN.safeTransferFrom(msg.sender, SARCO_DAO, usdc_cost);\\n\\n        //approve tokens to general vesting contract...\\n        // will need to just approve and call deposit\\n        SARCO_TOKEN.approve(GENERAL_TOKEN_VESTING, sarco_allocation);\\n\\n        // must include tokenvesting contract address + vesting_end_delay\\n        GeneralTokenVesting(GENERAL_TOKEN_VESTING).startVest(\\n            _sarco_receiver,\\n            sarco_allocation,\\n            vesting_end_delay,\\n            SARCO_TOKEN\\n        );\\n\\n        emit PurchaseExecuted(_sarco_receiver, sarco_allocation, usdc_cost);\\n    }\\n\\n    /**\\n     * @dev Purchases Sarco for the specified address (defaults to message sender) in exchange for USDC.\\n     */\\n    function execute_purchase(address _sarco_receiver) external {\\n        _execute_purchase(_sarco_receiver);\\n    }\\n\\n    /**\\n     * @dev If unsold_sarco_amount > 0 after the offer expired, sarco tokens are send back to sacro_dao.\\n     */\\n    function recover_unsold_tokens() external {\\n        require(\\n            offer_started(),\\n            \\\"PurchaseExecutor: Purchase offer has not started\\\"\\n        );\\n        require(\\n            offer_expired(),\\n            \\\"PurchaseExecutor: Purchase offer has not yet expired\\\"\\n        );\\n\\n        uint256 unsold_sarco_amount = SARCO_TOKEN.balanceOf(address(this));\\n        require(\\n            unsold_sarco_amount > 0,\\n            \\\"PurchaseExecutor: There are no tokens to recover\\\"\\n        );\\n        SARCO_TOKEN.safeTransfer(SARCO_DAO, unsold_sarco_amount);\\n        emit TokensRecovered(unsold_sarco_amount);\\n    }\\n}\\n\",\"keccak256\":\"0xb3f1f98214b4e88e2de6361a6fb3636d65d3b10afe4342e150b5db6c5b04058a\",\"license\":\"MIT\"},\"contracts/interfaces/GeneralTokenVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\npragma solidity ^0.8.4;\\n\\ninterface GeneralTokenVesting {\\n    function startVest(\\n        address beneficiary,\\n        uint256 tokensToVest,\\n        uint256 vestDuration,\\n        IERC20 tokenAddress\\n    ) external;\\n}\\n\",\"keccak256\":\"0xace03bdd36d195c174634b9fdf5fcc98f332ab3bb3a7e5350c7507389d7a6c63\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002cf738038062002cf7833981810160405281019062000037919062000848565b60008a116200007d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000749062000bc6565b60405180910390fd5b60008911620000c3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000ba9062000c4e565b60405180910390fd5b6000881162000109576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001009062000be8565b60405180910390fd5b855187511462000150576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001479062000c2c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415620001c3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001ba9062000cb4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000236576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200022d9062000c92565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620002a9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002a09062000b82565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200031c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003139062000b60565b60405180910390fd5b8960048190555088600a819055508760078190555084600581905550836000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000805b88518110156200067f57600089828151811062000485577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000502576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004f99062000b3e565b60405180910390fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541462000587576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200057e9062000c70565b60405180910390fd5b6000898381518110620005c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000811162000613576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200060a9062000ba4565b60405180910390fd5b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808462000665919062000d6e565b935050508080620006769062000e3f565b9150506200043f565b50858114620006c5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006bc9062000c0a565b60405180910390fd5b505050505050505050505062001330565b6000620006ed620006e78462000cff565b62000cd6565b905080838252602082019050828560208602820111156200070d57600080fd5b60005b85811015620007415781620007268882620007c0565b84526020840193506020830192505060018101905062000710565b5050509392505050565b6000620007626200075c8462000d2e565b62000cd6565b905080838252602082019050828560208602820111156200078257600080fd5b60005b85811015620007b657816200079b888262000831565b84526020840193506020830192505060018101905062000785565b5050509392505050565b600081519050620007d181620012fc565b92915050565b600082601f830112620007e957600080fd5b8151620007fb848260208601620006d6565b91505092915050565b600082601f8301126200081657600080fd5b8151620008288482602086016200074b565b91505092915050565b600081519050620008428162001316565b92915050565b6000806000806000806000806000806101408b8d0312156200086957600080fd5b6000620008798d828e0162000831565b9a505060206200088c8d828e0162000831565b99505060406200089f8d828e0162000831565b98505060608b015167ffffffffffffffff811115620008bd57600080fd5b620008cb8d828e01620007d7565b97505060808b015167ffffffffffffffff811115620008e957600080fd5b620008f78d828e0162000804565b96505060a06200090a8d828e0162000831565b95505060c06200091d8d828e01620007c0565b94505060e0620009308d828e01620007c0565b935050610100620009448d828e01620007c0565b925050610120620009588d828e01620007c0565b9150509295989b9194979a5092959850565b60006200097960368362000d5d565b9150620009868262000efc565b604082019050919050565b6000620009a060308362000d5d565b9150620009ad8262000f4b565b604082019050919050565b6000620009c7603c8362000d5d565b9150620009d48262000f9a565b604082019050919050565b6000620009ee60378362000d5d565b9150620009fb8262000fe9565b604082019050919050565b600062000a15602d8362000d5d565b915062000a228262001038565b604082019050919050565b600062000a3c60398362000d5d565b915062000a498262001087565b604082019050919050565b600062000a6360508362000d5d565b915062000a7082620010d6565b606082019050919050565b600062000a8a60428362000d5d565b915062000a97826200114b565b606082019050919050565b600062000ab160328362000d5d565b915062000abe82620011c0565b604082019050919050565b600062000ad860318362000d5d565b915062000ae5826200120f565b604082019050919050565b600062000aff60328362000d5d565b915062000b0c826200125e565b604082019050919050565b600062000b2660318362000d5d565b915062000b3382620012ad565b604082019050919050565b6000602082019050818103600083015262000b59816200096a565b9050919050565b6000602082019050818103600083015262000b7b8162000991565b9050919050565b6000602082019050818103600083015262000b9d81620009b8565b9050919050565b6000602082019050818103600083015262000bbf81620009df565b9050919050565b6000602082019050818103600083015262000be18162000a06565b9050919050565b6000602082019050818103600083015262000c038162000a2d565b9050919050565b6000602082019050818103600083015262000c258162000a54565b9050919050565b6000602082019050818103600083015262000c478162000a7b565b9050919050565b6000602082019050818103600083015262000c698162000aa2565b9050919050565b6000602082019050818103600083015262000c8b8162000ac9565b9050919050565b6000602082019050818103600083015262000cad8162000af0565b9050919050565b6000602082019050818103600083015262000ccf8162000b17565b9050919050565b600062000ce262000cf5565b905062000cf0828262000e09565b919050565b6000604051905090565b600067ffffffffffffffff82111562000d1d5762000d1c62000ebc565b5b602082029050602081019050919050565b600067ffffffffffffffff82111562000d4c5762000d4b62000ebc565b5b602082029050602081019050919050565b600082825260208201905092915050565b600062000d7b8262000dff565b915062000d888362000dff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000dc05762000dbf62000e8d565b5b828201905092915050565b600062000dd88262000ddf565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b62000e148262000eeb565b810181811067ffffffffffffffff8211171562000e365762000e3562000ebc565b5b80604052505050565b600062000e4c8262000dff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000e825762000e8162000e8d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f50757263686173654578656375746f723a205075726368617365722043616e6e60008201527f6f7420626520746865205a65726f206164647265737300000000000000000000602082015250565b7f50757263686173654578656375746f723a205f736172636f5f64616f2063616e60008201527f6e6f742062652030206164647265737300000000000000000000000000000000602082015250565b7f50757263686173654578656375746f723a205f67656e6572616c5f746f6b656e60008201527f5f76657374696e672063616e6e6f742062652030206164647265737300000000602082015250565b7f50757263686173654578656375746f723a204e6f20616c6c6f6361746564205360008201527f6172636f20746f6b656e7320666f722061646472657373000000000000000000602082015250565b7f50757263686173654578656375746f723a2072617465206d757374206265206760008201527f726561746572207468616e203000000000000000000000000000000000000000602082015250565b7f50757263686173654578656375746f723a206f666665725f657870697261746960008201527f6f6e206d7573742062652067726561746572207468616e203000000000000000602082015250565b7f50757263686173654578656375746f723a20416c6c6f636174696f6e735f746f60008201527f74616c20646f6573206e6f7420657175616c207468652073756d206f6620706160208201527f7373656420616c6c6f636174696f6e7300000000000000000000000000000000604082015250565b7f50757263686173654578656375746f723a207075726368617365727320616e6460008201527f20616c6c6f636174696f6e73206c656e67746873206d7573742062652065717560208201527f616c000000000000000000000000000000000000000000000000000000000000604082015250565b7f50757263686173654578656375746f723a20656e645f64656c6179206d75737460008201527f2062652067726561746572207468616e20300000000000000000000000000000602082015250565b7f50757263686173654578656375746f723a20416c6c6f636174696f6e2068617360008201527f20616c7265616479206265656e20736574000000000000000000000000000000602082015250565b7f50757263686173654578656375746f723a205f736172636f5f746f6b656e206360008201527f616e6e6f74206265203020616464726573730000000000000000000000000000602082015250565b7f50757263686173654578656375746f723a205f757364635f746f6b656e20636160008201527f6e6e6f7420626520302061646472657373000000000000000000000000000000602082015250565b620013078162000dcb565b81146200131357600080fd5b50565b620013218162000dff565b81146200132d57600080fd5b50565b6119b780620013406000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063b3ec0df0116100a2578063d13bc41311610071578063d13bc4131461029d578063dd8537d7146102bb578063ec1d1e8a146102c5578063f3fe77ec146102e3578063fa5692741461031457610116565b8063b3ec0df01461023b578063be9a655514610259578063cb5b599514610263578063d121047c1461028157610116565b80637342ec0c116100e95780637342ec0c14610193578063826e7796146101b1578063953834f8146101e15780639662dc59146101ff578063a6ec9d121461021d57610116565b80630e8391981461011b5780631b6566581461013957806335a18d30146101575780633919c75614610175575b600080fd5b610123610332565b60405161013091906112cf565b60405180910390f35b61014161033f565b60405161014e9190611467565b60405180910390f35b61015f61034b565b60405161016c91906112cf565b60405180910390f35b61017d610358565b60405161018a919061120f565b60405180910390f35b61019b61037e565b6040516101a89190611467565b60405180910390f35b6101cb60048036038101906101c69190610f79565b610384565b6040516101d89190611467565b60405180910390f35b6101e961039c565b6040516101f69190611467565b60405180910390f35b6102076103a2565b6040516102149190611467565b60405180910390f35b6102256103a8565b604051610232919061120f565b60405180910390f35b6102436103ce565b6040516102509190611467565b60405180910390f35b6102616103d4565b005b61026b6103de565b6040516102789190611467565b60405180910390f35b61029b60048036038101906102969190610f79565b6103e4565b005b6102a56103f0565b6040516102b29190611467565b60405180910390f35b6102c36103f6565b005b6102cd61061f565b6040516102da91906112ea565b60405180910390f35b6102fd60048036038101906102f89190610f79565b610645565b60405161030b929190611482565b60405180910390f35b61031c61065a565b60405161032991906112ea565b60405180910390f35b6000806008541415905090565b670de0b6b3a764000081565b6000600954421015905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b60066020528060005260406000206000915090505481565b60085481565b60075481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b6103dc61067e565b565b60055481565b6103ed8161080b565b50565b600a5481565b6103fe610332565b61043d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043490611447565b60405180910390fd5b61044561034b565b610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047b90611327565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104e1919061120f565b60206040518083038186803b1580156104f957600080fd5b505afa15801561050d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105319190610fcb565b905060008111610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056d90611367565b60405180910390fd5b6105e5600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b489092919063ffffffff16565b7fbe842a2fe0dcb4d753f6d8de0884c9fe5e49f6c1e9d4c1b61d2a0c8fe1650631816040516106149190611467565b60405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061065183610bce565b91509150915091565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600854146106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba90611347565b60405180910390fd5b600554600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610721919061120f565b60206040518083038186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190610fcb565b146107b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a8906113e7565b60405180910390fd5b42600881905550600754426107c691906114dd565b6009819055507f20d65dc806f1ba6ab51537d616d92bf870e9c4db31557a7d0756636321802582600854600954604051610801929190611482565b60405180910390a1565b6000600854141561081f5761081e61067e565b5b6009544210610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085a906113a7565b60405180910390fd5b60008061086f83610bce565b91509150600082116108b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ad906113c7565b60405180910390fd5b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061096a33600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c44909392919063ffffffff16565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b81526004016109e9929190611261565b602060405180830381600087803b158015610a0357600080fd5b505af1158015610a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3b9190610fa2565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e9824d4f8484600a54600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b8152600401610ac1949392919061128a565b600060405180830381600087803b158015610adb57600080fd5b505af1158015610aef573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167f262152355731b9a323567e266064557ec9a5ed03bd75b80631a39eeb22e8503e8383604051610b3b929190611482565b60405180910390a2505050565b610bc98363a9059cbb60e01b8484604051602401610b67929190611261565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ccd565b505050565b6000806000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600064e8d4a5100060045483610c2b9190611533565b610c359190611533565b90508181935093505050915091565b610cc7846323b872dd60e01b858585604051602401610c659392919061122a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ccd565b50505050565b6000610d2f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610d949092919063ffffffff16565b9050600081511115610d8f5780806020019051810190610d4f9190610fa2565b610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8590611427565b60405180910390fd5b5b505050565b6060610da38484600085610dac565b90509392505050565b606082471015610df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de890611387565b60405180910390fd5b610dfa85610ec0565b610e39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3090611407565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e6291906111f8565b60006040518083038185875af1925050503d8060008114610e9f576040519150601f19603f3d011682016040523d82523d6000602084013e610ea4565b606091505b5091509150610eb4828286610ed3565b92505050949350505050565b600080823b905060008111915050919050565b60608315610ee357829050610f33565b600083511115610ef65782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2a9190611305565b60405180910390fd5b9392505050565b600081359050610f498161193c565b92915050565b600081519050610f5e81611953565b92915050565b600081519050610f738161196a565b92915050565b600060208284031215610f8b57600080fd5b6000610f9984828501610f3a565b91505092915050565b600060208284031215610fb457600080fd5b6000610fc284828501610f4f565b91505092915050565b600060208284031215610fdd57600080fd5b6000610feb84828501610f64565b91505092915050565b610ffd81611564565b82525050565b61100c81611576565b82525050565b600061101d826114ab565b61102781856114c1565b93506110378185602086016115d0565b80840191505092915050565b61104c816115ac565b82525050565b600061105d826114b6565b61106781856114cc565b93506110778185602086016115d0565b61108081611661565b840191505092915050565b60006110986034836114cc565b91506110a382611672565b604082019050919050565b60006110bb602b836114cc565b91506110c6826116c1565b604082019050919050565b60006110de6030836114cc565b91506110e982611710565b604082019050919050565b60006111016026836114cc565b915061110c8261175f565b604082019050919050565b6000611124601f836114cc565b915061112f826117ae565b602082019050919050565b6000611147602e836114cc565b9150611152826117d7565b604082019050919050565b600061116a602e836114cc565b915061117582611826565b604082019050919050565b600061118d601d836114cc565b915061119882611875565b602082019050919050565b60006111b0602a836114cc565b91506111bb8261189e565b604082019050919050565b60006111d36030836114cc565b91506111de826118ed565b604082019050919050565b6111f2816115a2565b82525050565b60006112048284611012565b915081905092915050565b60006020820190506112246000830184610ff4565b92915050565b600060608201905061123f6000830186610ff4565b61124c6020830185610ff4565b61125960408301846111e9565b949350505050565b60006040820190506112766000830185610ff4565b61128360208301846111e9565b9392505050565b600060808201905061129f6000830187610ff4565b6112ac60208301866111e9565b6112b960408301856111e9565b6112c66060830184611043565b95945050505050565b60006020820190506112e46000830184611003565b92915050565b60006020820190506112ff6000830184611043565b92915050565b6000602082019050818103600083015261131f8184611052565b905092915050565b600060208201905081810360008301526113408161108b565b9050919050565b60006020820190508181036000830152611360816110ae565b9050919050565b60006020820190508181036000830152611380816110d1565b9050919050565b600060208201905081810360008301526113a0816110f4565b9050919050565b600060208201905081810360008301526113c081611117565b9050919050565b600060208201905081810360008301526113e08161113a565b9050919050565b600060208201905081810360008301526114008161115d565b9050919050565b6000602082019050818103600083015261142081611180565b9050919050565b60006020820190508181036000830152611440816111a3565b9050919050565b60006020820190508181036000830152611460816111c6565b9050919050565b600060208201905061147c60008301846111e9565b92915050565b600060408201905061149760008301856111e9565b6114a460208301846111e9565b9392505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006114e8826115a2565b91506114f3836115a2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561152857611527611603565b5b828201905092915050565b600061153e826115a2565b9150611549836115a2565b92508261155957611558611632565b5b828204905092915050565b600061156f82611582565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006115b7826115be565b9050919050565b60006115c982611582565b9050919050565b60005b838110156115ee5780820151818401526020810190506115d3565b838111156115fd576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f50757263686173654578656375746f723a205075726368617365206f6666657260008201527f20686173206e6f74207965742065787069726564000000000000000000000000602082015250565b7f50757263686173654578656375746f723a204f666665722068617320616c726560008201527f6164792073746172746564000000000000000000000000000000000000000000602082015250565b7f50757263686173654578656375746f723a20546865726520617265206e6f207460008201527f6f6b656e7320746f207265636f76657200000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f50757263686173654578656375746f723a206f66666572206578706972656400600082015250565b7f50757263686173654578656375746f723a20796f752068617665206e6f20536160008201527f72636f20616c6c6f636174696f6e000000000000000000000000000000000000602082015250565b7f50757263686173654578656375746f723a206e6f742066756e6465642077697460008201527f6820536172636f20546f6b656e73000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f50757263686173654578656375746f723a205075726368617365206f6666657260008201527f20686173206e6f74207374617274656400000000000000000000000000000000602082015250565b61194581611564565b811461195057600080fd5b50565b61195c81611576565b811461196757600080fd5b50565b611973816115a2565b811461197e57600080fd5b5056fea2646970667358221220350804b7caa1b7e7d2843d447ad6c89f3263c826744d7ce525fed369efa291b564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063b3ec0df0116100a2578063d13bc41311610071578063d13bc4131461029d578063dd8537d7146102bb578063ec1d1e8a146102c5578063f3fe77ec146102e3578063fa5692741461031457610116565b8063b3ec0df01461023b578063be9a655514610259578063cb5b599514610263578063d121047c1461028157610116565b80637342ec0c116100e95780637342ec0c14610193578063826e7796146101b1578063953834f8146101e15780639662dc59146101ff578063a6ec9d121461021d57610116565b80630e8391981461011b5780631b6566581461013957806335a18d30146101575780633919c75614610175575b600080fd5b610123610332565b60405161013091906112cf565b60405180910390f35b61014161033f565b60405161014e9190611467565b60405180910390f35b61015f61034b565b60405161016c91906112cf565b60405180910390f35b61017d610358565b60405161018a919061120f565b60405180910390f35b61019b61037e565b6040516101a89190611467565b60405180910390f35b6101cb60048036038101906101c69190610f79565b610384565b6040516101d89190611467565b60405180910390f35b6101e961039c565b6040516101f69190611467565b60405180910390f35b6102076103a2565b6040516102149190611467565b60405180910390f35b6102256103a8565b604051610232919061120f565b60405180910390f35b6102436103ce565b6040516102509190611467565b60405180910390f35b6102616103d4565b005b61026b6103de565b6040516102789190611467565b60405180910390f35b61029b60048036038101906102969190610f79565b6103e4565b005b6102a56103f0565b6040516102b29190611467565b60405180910390f35b6102c36103f6565b005b6102cd61061f565b6040516102da91906112ea565b60405180910390f35b6102fd60048036038101906102f89190610f79565b610645565b60405161030b929190611482565b60405180910390f35b61031c61065a565b60405161032991906112ea565b60405180910390f35b6000806008541415905090565b670de0b6b3a764000081565b6000600954421015905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b60066020528060005260406000206000915090505481565b60085481565b60075481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b6103dc61067e565b565b60055481565b6103ed8161080b565b50565b600a5481565b6103fe610332565b61043d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043490611447565b60405180910390fd5b61044561034b565b610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047b90611327565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104e1919061120f565b60206040518083038186803b1580156104f957600080fd5b505afa15801561050d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105319190610fcb565b905060008111610576576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056d90611367565b60405180910390fd5b6105e5600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b489092919063ffffffff16565b7fbe842a2fe0dcb4d753f6d8de0884c9fe5e49f6c1e9d4c1b61d2a0c8fe1650631816040516106149190611467565b60405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061065183610bce565b91509150915091565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600854146106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba90611347565b60405180910390fd5b600554600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610721919061120f565b60206040518083038186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190610fcb565b146107b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a8906113e7565b60405180910390fd5b42600881905550600754426107c691906114dd565b6009819055507f20d65dc806f1ba6ab51537d616d92bf870e9c4db31557a7d0756636321802582600854600954604051610801929190611482565b60405180910390a1565b6000600854141561081f5761081e61067e565b5b6009544210610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085a906113a7565b60405180910390fd5b60008061086f83610bce565b91509150600082116108b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ad906113c7565b60405180910390fd5b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061096a33600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c44909392919063ffffffff16565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b81526004016109e9929190611261565b602060405180830381600087803b158015610a0357600080fd5b505af1158015610a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3b9190610fa2565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e9824d4f8484600a54600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b8152600401610ac1949392919061128a565b600060405180830381600087803b158015610adb57600080fd5b505af1158015610aef573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff167f262152355731b9a323567e266064557ec9a5ed03bd75b80631a39eeb22e8503e8383604051610b3b929190611482565b60405180910390a2505050565b610bc98363a9059cbb60e01b8484604051602401610b67929190611261565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ccd565b505050565b6000806000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600064e8d4a5100060045483610c2b9190611533565b610c359190611533565b90508181935093505050915091565b610cc7846323b872dd60e01b858585604051602401610c659392919061122a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ccd565b50505050565b6000610d2f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610d949092919063ffffffff16565b9050600081511115610d8f5780806020019051810190610d4f9190610fa2565b610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8590611427565b60405180910390fd5b5b505050565b6060610da38484600085610dac565b90509392505050565b606082471015610df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de890611387565b60405180910390fd5b610dfa85610ec0565b610e39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3090611407565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e6291906111f8565b60006040518083038185875af1925050503d8060008114610e9f576040519150601f19603f3d011682016040523d82523d6000602084013e610ea4565b606091505b5091509150610eb4828286610ed3565b92505050949350505050565b600080823b905060008111915050919050565b60608315610ee357829050610f33565b600083511115610ef65782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2a9190611305565b60405180910390fd5b9392505050565b600081359050610f498161193c565b92915050565b600081519050610f5e81611953565b92915050565b600081519050610f738161196a565b92915050565b600060208284031215610f8b57600080fd5b6000610f9984828501610f3a565b91505092915050565b600060208284031215610fb457600080fd5b6000610fc284828501610f4f565b91505092915050565b600060208284031215610fdd57600080fd5b6000610feb84828501610f64565b91505092915050565b610ffd81611564565b82525050565b61100c81611576565b82525050565b600061101d826114ab565b61102781856114c1565b93506110378185602086016115d0565b80840191505092915050565b61104c816115ac565b82525050565b600061105d826114b6565b61106781856114cc565b93506110778185602086016115d0565b61108081611661565b840191505092915050565b60006110986034836114cc565b91506110a382611672565b604082019050919050565b60006110bb602b836114cc565b91506110c6826116c1565b604082019050919050565b60006110de6030836114cc565b91506110e982611710565b604082019050919050565b60006111016026836114cc565b915061110c8261175f565b604082019050919050565b6000611124601f836114cc565b915061112f826117ae565b602082019050919050565b6000611147602e836114cc565b9150611152826117d7565b604082019050919050565b600061116a602e836114cc565b915061117582611826565b604082019050919050565b600061118d601d836114cc565b915061119882611875565b602082019050919050565b60006111b0602a836114cc565b91506111bb8261189e565b604082019050919050565b60006111d36030836114cc565b91506111de826118ed565b604082019050919050565b6111f2816115a2565b82525050565b60006112048284611012565b915081905092915050565b60006020820190506112246000830184610ff4565b92915050565b600060608201905061123f6000830186610ff4565b61124c6020830185610ff4565b61125960408301846111e9565b949350505050565b60006040820190506112766000830185610ff4565b61128360208301846111e9565b9392505050565b600060808201905061129f6000830187610ff4565b6112ac60208301866111e9565b6112b960408301856111e9565b6112c66060830184611043565b95945050505050565b60006020820190506112e46000830184611003565b92915050565b60006020820190506112ff6000830184611043565b92915050565b6000602082019050818103600083015261131f8184611052565b905092915050565b600060208201905081810360008301526113408161108b565b9050919050565b60006020820190508181036000830152611360816110ae565b9050919050565b60006020820190508181036000830152611380816110d1565b9050919050565b600060208201905081810360008301526113a0816110f4565b9050919050565b600060208201905081810360008301526113c081611117565b9050919050565b600060208201905081810360008301526113e08161113a565b9050919050565b600060208201905081810360008301526114008161115d565b9050919050565b6000602082019050818103600083015261142081611180565b9050919050565b60006020820190508181036000830152611440816111a3565b9050919050565b60006020820190508181036000830152611460816111c6565b9050919050565b600060208201905061147c60008301846111e9565b92915050565b600060408201905061149760008301856111e9565b6114a460208301846111e9565b9392505050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006114e8826115a2565b91506114f3836115a2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561152857611527611603565b5b828201905092915050565b600061153e826115a2565b9150611549836115a2565b92508261155957611558611632565b5b828204905092915050565b600061156f82611582565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006115b7826115be565b9050919050565b60006115c982611582565b9050919050565b60005b838110156115ee5780820151818401526020810190506115d3565b838111156115fd576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f50757263686173654578656375746f723a205075726368617365206f6666657260008201527f20686173206e6f74207965742065787069726564000000000000000000000000602082015250565b7f50757263686173654578656375746f723a204f666665722068617320616c726560008201527f6164792073746172746564000000000000000000000000000000000000000000602082015250565b7f50757263686173654578656375746f723a20546865726520617265206e6f207460008201527f6f6b656e7320746f207265636f76657200000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f50757263686173654578656375746f723a206f66666572206578706972656400600082015250565b7f50757263686173654578656375746f723a20796f752068617665206e6f20536160008201527f72636f20616c6c6f636174696f6e000000000000000000000000000000000000602082015250565b7f50757263686173654578656375746f723a206e6f742066756e6465642077697460008201527f6820536172636f20546f6b656e73000000000000000000000000000000000000602082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f50757263686173654578656375746f723a205075726368617365206f6666657260008201527f20686173206e6f74207374617274656400000000000000000000000000000000602082015250565b61194581611564565b811461195057600080fd5b50565b61195c81611576565b811461196757600080fd5b50565b611973816115a2565b811461197e57600080fd5b5056fea2646970667358221220350804b7caa1b7e7d2843d447ad6c89f3263c826744d7ce525fed369efa291b564736f6c63430008040033",
  "devdoc": {
    "details": "allow a whitelisted set of addresses to purchase SARCO tokens, for stablecoins (USDC), at a set rate",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "inits/sets sarco purchase enviorment",
        "params": {
          "_general_token_vesting": "General Vesting contract address",
          "_offer_expiration_delay": "Delay from the contract deployment to offer expiration, in seconds",
          "_sarco_allocations": "List of SARCO token allocations, should include decimals 10 ** 18",
          "_sarco_allocations_total": "Checksum of SARCO token allocations, should include decimals 10 ** 18",
          "_sarco_dao": "Sarco DAO contract address",
          "_sarco_purchasers": "List of valid SARCO purchasers",
          "_sarco_token": "Sarco token address",
          "_usdc_to_sarco_rate": "How much SARCO one gets for one USDC (multiplied by 10**18)",
          "_usdc_token": "USDC token address",
          "_vesting_end_delay": "Delay from the purchase moment to the vesting end moment, in seconds"
        }
      },
      "execute_purchase(address)": {
        "details": "Purchases Sarco for the specified address (defaults to message sender) in exchange for USDC."
      },
      "get_allocation(address)": {
        "returns": {
          "_0": "A tuple: the first element is the amount of SARCO available for purchase (zero if the purchase was already executed for that address), the second element is the USDC cost of the purchase."
        }
      },
      "recover_unsold_tokens()": {
        "details": "If unsold_sarco_amount > 0 after the offer expired, sarco tokens are send back to sacro_dao."
      }
    },
    "title": "PurchaseExecutor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 614,
        "contract": "contracts/PurchaseExecutor.sol:PurchaseExecutor",
        "label": "USDC_TOKEN",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 617,
        "contract": "contracts/PurchaseExecutor.sol:PurchaseExecutor",
        "label": "SARCO_TOKEN",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 619,
        "contract": "contracts/PurchaseExecutor.sol:PurchaseExecutor",
        "label": "GENERAL_TOKEN_VESTING",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 621,
        "contract": "contracts/PurchaseExecutor.sol:PurchaseExecutor",
        "label": "SARCO_DAO",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 623,
        "contract": "contracts/PurchaseExecutor.sol:PurchaseExecutor",
        "label": "usdc_to_sarco_rate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 625,
        "contract": "contracts/PurchaseExecutor.sol:PurchaseExecutor",
        "label": "sarco_allocations_total",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 629,
        "contract": "contracts/PurchaseExecutor.sol:PurchaseExecutor",
        "label": "sarco_allocations",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 631,
        "contract": "contracts/PurchaseExecutor.sol:PurchaseExecutor",
        "label": "offer_expiration_delay",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 633,
        "contract": "contracts/PurchaseExecutor.sol:PurchaseExecutor",
        "label": "offer_started_at",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 635,
        "contract": "contracts/PurchaseExecutor.sol:PurchaseExecutor",
        "label": "offer_expires_at",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 637,
        "contract": "contracts/PurchaseExecutor.sol:PurchaseExecutor",
        "label": "vesting_end_delay",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}